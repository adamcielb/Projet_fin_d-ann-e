#include <iostream>
#include <wiringPi.h>
#include <ctime>

#define WIND_SENSOR_PIN 0  // GPIO 17 correspond à Pin 0 dans wiringPi
#define WIND_FACTOR 2.5  // Facteur de conversion en mph/impulsion
#define MEASUREMENT_TIME 5  // Durée de chaque mesure en secondes

using namespace std;

volatile int pulseCount = 0;  // Compteur d'impulsions

// Fonction appelée à chaque impulsion détectée
void windPulse() {
    pulseCount++;  // Incrémente à chaque front descendant (fermeture Reed switch)
}

int main() {
    // Initialisation de wiringPi
    if (wiringPiSetup() == -1) {
        cerr << "Erreur d'initialisation de wiringPi !" << endl;
        return 1;
    }

    // Configuration du GPIO en entrée avec interruption
    pinMode(WIND_SENSOR_PIN, INPUT);
    pullUpDnControl(WIND_SENSOR_PIN, PUD_UP);  // Active la résistance pull-up
    wiringPiISR(WIND_SENSOR_PIN, INT_EDGE_FALLING, &windPulse); // Détection des impulsions

    int nombreReleves;
    cout << "Combien de relevés souhaitez-vous ? ";
    cin >> nombreReleves;

    for (int i = 0; i < nombreReleves; i++) {
        pulseCount = 0;
        time_t startTime = time(nullptr);

        while (time(nullptr) - startTime < MEASUREMENT_TIME) {
            delay(100);
        }

        // Calcul de la vitesse du vent
        double windSpeedMph = (pulseCount * WIND_FACTOR) / MEASUREMENT_TIME;
        double windSpeedKmh = windSpeedMph * 1.609;

        cout << "Relevé " << (i + 1) << " - Vitesse du vent : " 
             << windSpeedMph << " mph (" << windSpeedKmh << " km/h)" << endl;
    }

    return 0;
}


