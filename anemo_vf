#include <wiringPi.h>
#include <iostream>
#include <chrono>
#include <cmath>

using namespace std;
using namespace std::chrono;

#define PIN_ANEMO 17

const double DIAMETRE_PO = 2.6;
const double DIAMETRE_CM = DIAMETRE_PO * 2.54;
const double RAYON_CM = DIAMETRE_CM / 2.0;
const double CIRCONFERENCE_CM = 2 * M_PI * RAYON_CM;

volatile bool firstPulseCaptured = false;
steady_clock::time_point t0, tx;

const double DEBOUNCE_MIN_DELTA = 0.05;
volatile int compteur = 0; // compteur global pour 15 relevés

void pulseISR() {
    static steady_clock::time_point lastPulse = steady_clock::now();
    auto now = steady_clock::now();
    double sinceLastPulse = duration_cast<duration<double>>(now - lastPulse).count();

    if (sinceLastPulse < DEBOUNCE_MIN_DELTA) return;
    lastPulse = now;

    if (!firstPulseCaptured) {
        t0 = now;
        firstPulseCaptured = true;
    } else {
        tx = now;
        double deltaT = duration_cast<duration<double>>(tx - t0).count();

        if (deltaT > DEBOUNCE_MIN_DELTA && compteur < 15) {
            double vitesseLin_cm_s = CIRCONFERENCE_CM / deltaT;
            double vitesse_m_s = vitesseLin_cm_s / 100.0;
            double vitesse_km_h = vitesse_m_s * 3.6;

            cout << "Δt = " << deltaT << " s | Vitesse du vent : " 
                 << vitesse_m_s << " m/s (" << vitesse_km_h << " km/h)" << endl;

            compteur++; // Incrémenter ici
        }

        firstPulseCaptured = false;
    }
}

int main() {
    if (wiringPiSetupGpio() == -1) {
        cerr << "Erreur : wiringPi non initialisé !" << endl;
        return 1;
    }

    pinMode(PIN_ANEMO, INPUT);
    pullUpDnControl(PIN_ANEMO, PUD_UP);

    if (wiringPiISR(PIN_ANEMO, INT_EDGE_FALLING, &pulseISR) < 0) {
        cerr << "Erreur : Impossible d'attacher l'interruption GPIO 17 !" << endl;
        return 1;
    }

    cout << "Démarrage du capteur de vent Peet Bros..." << endl;

    // Boucle active jusqu’à 15 mesures
    while (compteur < 15) {
        delay(100); // Juste pour alléger le CPU
    }

    cout << "Fin des 15 relevés." << endl;
    return 0;
}
